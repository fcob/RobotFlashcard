(*-----------------------------------------------------------------------------
*                             (c) 2002 by KEBA AG
*                                Linz/AUSTRIA
*                             All rights reserved
*------------------------------------------------------------------------------
*  Component    : RCU
*  Modul        : TRcuPositionJointsTrack.tts
*  First Author : pen
*  Date         : 15.11.2001
*------------------------------------------------------------------------------
*  Description:
*
*  Joints-Position with joints tracking
*------------------------------------------------------------------------------
*)


INHERIT TRcuPosition;


// data describing the current position
VAR
   offsObj      : TRcuOffsetObject;
   nrMainJoints : DINT;
//   joints : TMcuJointVector;
   joints : ARRAY [cgiRcuMaxJoints] OF REAL;
   nrAuxJoints  : DINT;
   auxJoints    : ARRAY [cgiRcuMaxAuxJoints] OF REAL;
END_VAR


ROUTINE GetReferenceSystem(CONST kin : TRcuKinematic) : TRcuReferenceSystem
   RETURN eRcuRefSystemInvalid;
END_ROUTINE

// Fill a Mcu-Position with values corresponding to the current position
ROUTINE GetMcuPos(pos : TMcuPosition; CONST kin : TRcuKinematic) : BOOL
   VAR
      i : DINT;
   END_VAR

   IF NOT RcuOffsObjGetMcuId(offsObj, pos.mJointsOffsetID) THEN
      RETURN FALSE;
   END_IF;
   IF (nrMainJoints = 0) AND (nrAuxJoints = 0) THEN
      RETURN FALSE; // obviously no valid content
   END_IF;
   pos.mDBObjTyp := eMcuPermanent;
   pos.mName := INSTANCE_NAME();
   pos.mPosTyp := eMcuPosJoints;
   //pos.mPosJoints.mJoints.mValues := joints;
   FOR i := 0 TO nrMainJoints - 1 DO
      pos.mPosJoints.mJoints.mValues[i] := joints[i];
   END_FOR;
   pos.mPosJoints.mJoints.mValidLen := nrMainJoints;

   pos.mAuxJoints.mValidLen := nrAuxJoints;
   FOR i := 0 TO nrAuxJoints - 1 DO
      pos.mAuxJoints.mValues[i] := auxJoints[i];
   END_FOR;
   RETURN TRUE;
END_ROUTINE


// Fill the current position with values from the current Kinematic. Can be
// called from e.g. the Dialogue-system.
ROUTINE TEACH(pos : TRcuPositionJointsTrack) : BOOL
   VAR
      actOffset : TMcuVector;
      elem : TRcuOffsObjElement;
      i : DINT;
      tmpOffsObj : TRcuOffsetObject;
      kin : MAPTO TRcuKinematic;
   END_VAR

   IF instId = 0 THEN
      instId := RcuGetInstanceId();
   END_IF;
   
   // check kinematic focus
   IF NOT IS_MAPPED(gRcuFocusedKinematic) THEN
      RcuSetMessageOnce(TRcuPosJntsTrack_ErrNoKinSelect, -1, 1, instId, "TRcuPositionJointsTrack.TEACH", INSTANCE_NAME());
      RETURN FALSE;
   ELSE
      kin := MAP(gRcuFocusedKinematic);
   END_IF;

   // check whether kinematic is ready for teaching
   IF NOT(kin.updateActive AND kin.allDrivesReferenced) THEN
      RcuSetMessageOnce(TRcuPosJntsTrack_ErrKinNotReady, kin.kinListInx, 1, instId, "TRcuPositionJointsTrack.TEACH", INSTANCE_NAME());
      RETURN FALSE;
   END_IF;

   // if gRcuTeachOffsetObject is set then use it, otherwise use actual offsObj
   IF gRcuTeachOffsetObject <> eRcuOffsObjInvalid THEN
      tmpOffsObj := gRcuTeachOffsetObject;
   ELSE
      tmpOffsObj := offsObj;
   END_IF;

   // copy joints from the Offset Object specified by tmpOffsObj
   IF NOT RcuOffsObjRead(tmpOffsObj, elem) THEN
      RcuSetMessageOnce(TRcuPosJntsTrack_ErrObjOffsInv, kin.kinListInx, 1, instId, "TRcuPositionJointsTrack.TEACH", INSTANCE_NAME());
      RETURN FALSE;
   END_IF;
   IF (NOT elem.valid) OR (kin.kinematicMcuId <> elem.kinMcuId) THEN
      RcuSetMessageOnce(TRcuPosJntsTrack_ErrKinNotReady, kin.kinListInx, 2, instId, "TRcuPositionJointsTrack.TEACH", INSTANCE_NAME());
      RETURN FALSE;
   END_IF;
   actOffset := gyRcuTrackingJoints[tmpOffsObj];
   // set offset object
   offsObj := tmpOffsObj;

   // read actual values
   nrMainJoints := kin.nrOfMainJoints;
   nrAuxJoints := kin.nrOfAuxJoints;
   FOR i := 0 TO nrMainJoints - 1  DO
      joints[i] := kin.actJoints.mPos[i] -
         actOffset.mValues[i];
   END_FOR;
   FOR i := 0 TO nrAuxJoints - 1  DO
      auxJoints[i] := kin.actJoints.mPos[nrMainJoints + i] -
         actOffset.mValues[nrMainJoints + i];
   END_FOR;

   RETURN TRUE;
END_ROUTINE

