(*-----------------------------------------------------------------------------
*                             (c) 2002 by KEBA AG
*                                Linz/AUSTRIA
*                             All rights reserved
*------------------------------------------------------------------------------
*  Component    : RCU
*  Modul        : TRcuWorkingArea.tts
*  First Author : pen
*  Date         : 25.4.2002
*------------------------------------------------------------------------------
*  Description:
*
*  Representation of a Working Area
*------------------------------------------------------------------------------
*)


(*******************************************************************************
* members
*)

VAR
   areaType : TMcuAreaType;      // working area, nogo area
   areaShape : TMcuAreaShape;    // box, cylinder, sphere
   refSys : TRcuReferenceSystem; // reference system for basePos
   basePos : TMcuFrame;          // base position
   size : TMcuVector3;           // size
   inMainInterp : BOOL;          // controlled in main-interpolation
   inForwardInterp : BOOL;       // controlled in forward-interpolation
   inOfflineList : BOOL;         // member of offline list
   areaName      : STRING;
   cfgActive     : BOOL;         // in Configuration declared as active
   cfgSpecial    : DINT;         // special features : 1 .. active only in fullspeed
   active : BOOL;                // indicates whether the area is active or not
   instId : DINT;                // instance identification number (for errors)
END_VAR


// create the area object and designate it to a certain kinematic
ROUTINE Create(CONST kin : TRcuKinematic) : BOOL
   VAR
      area : TMcuArea;
      success : BOOL;
   END_VAR

   // remove existing objects
   RemoveDbObjects();

   // connection to the kinematic
   myKinematic := MAP(kin);

   // create new objects
   IF areaName = "" THEN
      area.mName := INSTANCE_NAME();
   ELSE
      area.mName := areaName;
   END_IF;
   area.mDBObjTyp := eMcuPermanent;
   area.mAreaTyp := areaType;
   area.mAreaShape := areaShape;
   area.mBasePos := basePos;
   area.mSize := size;
   area.mKinematicID := kin.kinematicMcuId;
   IF RcuRefSysGetMcuId(refSys, area.mRefSysID) THEN
      // create area object
      IF McuCreateArea(areaMcuId, area) THEN
               success := TRUE;
      END_IF;
   END_IF;

   // consider success
   IF NOT success THEN
      RcuSetMessageOnce(TRcuWorkingArea_ErrWrkAreaCrt, myKinematic.kinListInx, 1, instId, "TRcuWorkingArea.Create", INSTANCE_NAME());
   END_IF;
   RETURN success;
END_ROUTINE


// activate the area
ROUTINE Activate() : BOOL

   IF McuActivateArea(areaMcuId) THEN
      active := TRUE;
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END_IF;
END_ROUTINE


// deactivate the area
ROUTINE Deactivate() : BOOL

   IF McuDeactivateArea(areaMcuId) THEN
      active := FALSE;
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END_IF;
END_ROUTINE


// get the name of the working area
ROUTINE GetResourceName() : STRING
   RETURN INSTANCE_NAME();
END_ROUTINE


(*******************************************************************************
* private members
*)

VAR PRIVATE
   areaMcuId : TMcuDbObjID;
   myKinematic : MAPTO TRcuKinematic;
END_VAR


// remove existing objects, makes a new create possible
ROUTINE RemoveDbObjects() PRIVATE

   IF areaMcuId <> 0 THEN
      McuDeactivateArea(areaMcuId);
      McuReleaseDbObj(areaMcuId);
      areaMcuId := 0;
   END_IF;
   active := FALSE;
END_ROUTINE


(******************************************************************************
* systemroutines
*)

ROUTINE NEW()

   instId := RcuGetInstanceId();
END_ROUTINE


ROUTINE DELETE()

   RemoveDbObjects();
END_ROUTINE
